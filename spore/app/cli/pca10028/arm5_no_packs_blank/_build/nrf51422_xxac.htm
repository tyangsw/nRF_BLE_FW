<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51422_xxac.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51422_xxac.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Feb 17 20:22:15 2016
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; test_menu &rArr; i2c_menu &rArr; i2c_write_ops &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[34]">__asm___5_i2c_c_i2c_init__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">__asm___5_i2c_c_i2c_init__nrf_delay_us</a><BR>
 <LI><a href="#[33]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c]">ADC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">GPIOTE_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">RTC1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">SWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[11]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER2_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[23]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[24]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[22]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[30]">ack_error</a> from nrf_drv_twi.o(i.ack_error) referenced 4 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[29]">address_req</a> from nrf_drv_twi.o(i.address_req) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[26]">fputc</a> from retarget.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[25]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[1f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2d]">on_error</a> from nrf_drv_twi.o(i.on_error) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[2a]">rx_address_req</a> from nrf_drv_twi.o(i.rx_address_req) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[2f]">rx_done</a> from nrf_drv_twi.o(i.rx_done) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[2e]">rx_prepare</a> from nrf_drv_twi.o(i.rx_prepare) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[2b]">tx_done</a> from nrf_drv_twi.o(i.tx_done) referenced 2 times from nrf_drv_twi.o(.constdata)
 <LI><a href="#[2c]">tx_prepare</a> from nrf_drv_twi.o(i.tx_prepare) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[28]">uart_error_handle</a> from uart.o(i.uart_error_handle) referenced from uart.o(i.uart_init)
 <LI><a href="#[27]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[31]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[8b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[8d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[8e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[33]"></a>__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_twi.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[34]"></a>__asm___5_i2c_c_i2c_init__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_i2c_c_i2c_init__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_i2c_c_i2c_init__nrf_delay_us
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ishex
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[25]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ishex
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_read
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ishex
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[39]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
</UL>

<P><STRONG><a name="[3b]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3c]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[3a]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[22]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[94]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[95]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[96]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[9]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI0_TWI0_IRQHandler &rArr; nrf_drv_twi_int_handler &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>UART0_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_IRQHandler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[97]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[62]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_read
</UL>

<P><STRONG><a name="[84]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, menu.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[99]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[9a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[88]"></a>app_error_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_error.o(i.app_error_handler))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_error_handle
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[51]"></a>app_fifo_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[58]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[53]"></a>app_fifo_put</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[55]"></a>app_uart_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[57]"></a>app_uart_init</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[5c]"></a>app_uart_put</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[86]"></a>critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.critical_region_enter))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[87]"></a>critical_region_exit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_util_platform.o(i.critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[5e]"></a>fgetc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, retarget.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fgetc &rArr; app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[26]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[5f]"></a>getc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getc &rArr; fgetc &rArr; app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_char
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>i2c_dev_read</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, i2c.o(i.i2c_dev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = i2c_dev_read &rArr; i2c_read &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
</UL>

<P><STRONG><a name="[63]"></a>i2c_dev_write</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, i2c.o(i.i2c_dev_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = i2c_dev_write &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___5_i2c_c_i2c_init__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_on
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_off
</UL>

<P><STRONG><a name="[66]"></a>i2c_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, i2c.o(i.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = i2c_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>i2c_probe</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c.o(i.i2c_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = i2c_probe &rArr; i2c_read &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = main &rArr; test_menu &rArr; i2c_menu &rArr; i2c_write_ops &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[78]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[68]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[67]"></a>nrf_drv_twi_init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[71]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_twi_rx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[65]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
</UL>

<P><STRONG><a name="[5a]"></a>nrf_drv_uart_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_drv_uart_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[56]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[5b]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_uart_rx_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[5d]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[73]"></a>putc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = putc &rArr; fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_line
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[6a]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[82]"></a>test_led_off</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, menu.o(i.test_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = test_led_off &rArr; i2c_dev_write &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[83]"></a>test_led_on</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, menu.o(i.test_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = test_led_on &rArr; i2c_dev_write &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[76]"></a>test_menu</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, menu.o(i.test_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = test_menu &rArr; i2c_menu &rArr; i2c_write_ops &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_line
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_probe
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_on
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_led_off
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>uart_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = uart_init &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[27]"></a>uart_event_handler</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[7f]"></a>nrf_gpio_cfg</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>

<P><STRONG><a name="[7d]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[7c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[48]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[47]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>rx_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[4a]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>rx_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.rx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[4b]"></a>tx_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[4c]"></a>tx_done_event</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[30]"></a>ack_error</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.ack_error))
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>address_req</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.address_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = address_req &rArr; tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>nrf_drv_twi_int_handler</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.nrf_drv_twi_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_twi_int_handler &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[79]"></a>nrf_twi_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>

<P><STRONG><a name="[2d]"></a>on_error</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.on_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_error
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>rx_address_req</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.rx_address_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rx_address_req &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>rx_done</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.rx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rx_done &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>rx_prepare</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.rx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>state_machine</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_int_handler
</UL>

<P><STRONG><a name="[77]"></a>twi_clear_bus</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nrf_drv_twi_c_a9bcf68d__nrf_delay_us
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[7b]"></a>twi_transfer</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;critical_region_exit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;critical_region_enter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[2b]"></a>tx_done</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.tx_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tx_done &rArr; tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_twi.o(.constdata)
<LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>tx_prepare</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.tx_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_prepare &rArr; txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txrx_shorts_set_task_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>txrx_shorts_set_task_start</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.txrx_shorts_set_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = txrx_shorts_set_task_start &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_prepare
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_prepare
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_address_req
</UL>

<P><STRONG><a name="[52]"></a>fifo_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[54]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[28]"></a>uart_error_handle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.uart_error_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_error_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.uart_init)
</UL>
<P><STRONG><a name="[69]"></a>i2c_menu</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, menu.o(i.i2c_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = i2c_menu &rArr; i2c_write_ops &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_line
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[6e]"></a>i2c_read_ops</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, menu.o(i.i2c_read_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_read_ops &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_line
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ishex
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_read
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
</UL>

<P><STRONG><a name="[6f]"></a>i2c_write_ops</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, menu.o(i.i2c_write_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = i2c_write_ops &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_line
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ishex
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_write
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
</UL>

<P><STRONG><a name="[72]"></a>ishex</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, menu.o(i.ishex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ishex
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
</UL>

<P><STRONG><a name="[74]"></a>pause</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menu.o(i.pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pause &rArr; pend_rx_char &rArr; getc &rArr; fgetc &rArr; app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_char
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[80]"></a>pend_rx_char</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, menu.o(i.pend_rx_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pend_rx_char &rArr; getc &rArr; fgetc &rArr; app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_line
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause
</UL>

<P><STRONG><a name="[6b]"></a>pend_rx_line</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, menu.o(i.pend_rx_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pend_rx_line &rArr; pend_rx_char &rArr; getc &rArr; fgetc &rArr; app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_rx_char
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write_ops
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read_ops
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_menu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_menu
</UL>

<P><STRONG><a name="[61]"></a>i2c_read</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, i2c.o(i.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = i2c_read &rArr; nrf_drv_twi_tx &rArr; twi_transfer &rArr; state_machine
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_probe
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_dev_read
</UL>

<P><STRONG><a name="[46]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4e]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[50]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[42]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[44]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
